name: "Auto Merge Safe PRs"

on:
  pull_request:
    types: [labeled, synchronize, opened, reopened]

jobs:
  automerge:
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == false
    steps:
      - name: Check required status checks
        uses: actions/github-script@v7
        id: checks
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
            });
            const checks = await github.rest.checks.listForRef({
              owner: context.repo.owner,
              repo: context.repo.repo,
              ref: pr.data.head.sha,
            });
            // Check all required checks are successful
            if (checks.data.check_runs.some(c => c.conclusion !== 'success')) {
              throw new Error('Not all checks have passed!');
            }

      - name: Merge PR if approved and no conflicts
        uses: actions/github-script@v7
        with:
          script: |
            const pr = await github.rest.pulls.get({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
            });
            if (pr.data.mergeable_state !== "clean") {
              throw new Error("PR is not mergeable (may have conflicts or be out of date)");
            }
            const reviews = await github.rest.pulls.listReviews({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
            });
            const approved = reviews.data.filter(r => r.state === "APPROVED").length > 0;
            if (!approved) {
              throw new Error("PR has not been approved by a reviewer.");
            }
            await github.rest.pulls.merge({
              owner: context.repo.owner,
              repo: context.repo.repo,
              pull_number: context.payload.pull_request.number,
            });
